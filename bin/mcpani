#!/usr/bin/perl
use v5.16;

use strict;
use subs qw(verbose);

use CPAN::Mini::Inject;
use Env;
use File::Slurp 'write_file';
use File::Spec::Functions qw(rootdir catfile);
use File::Temp;
use Getopt::Long;
use Pod::Usage 1.12;

our $VERSION = '0.38';
our $mcpi;

$|++;
{
my $old = select(STDERR);
$|++;
select($old);
}

sub print_version {
  printf( "mcpani v%s, using CPAN::Mini::Inject v%s and Perl v%vd\n",
    $VERSION, $CPAN::Mini::Inject::VERSION, $^V );
}

sub _authorid {
  my($options) = @_;
  $options->{authorid}
    // $ENV{CPAN_MINI_INJECT_AUTHORID}
    // $mcpi->config->get('authorid')
    // die "No authorid found in --authorid, CPAN_MINI_INJECT_AUTHORID, or in config\n";
}

sub add {
  my($mcpi, $options) = @_;

  $mcpi->readlist;

  my $authorid = _authorid();

  $mcpi->add(
    module   => $options->{module},
    authorid => $authorid,
    version  => $options->{version},
    file     => $options->{file}
  );

  if ( $options->{verbose} ) {
    my @added = $mcpi->added_modules;
    foreach my $added ( @added ){
      print "\nAdding File: $added->{file}\n";
      print "Author ID: $added->{authorid}\n";
      my $modules = $added->{modules};
      foreach my $mod ( sort keys %$modules ){
        print "Module: $mod\n";
        print "Version: $modules->{$mod}\n";
      }
      print "To repository: $mcpi->{config}{repository}\n\n";
    }
  }
  $mcpi->writelist;
}

sub inject {
  my($mcpi, $options) = @_;

  printf "Injecting modules from %s\n", $mcpi->config->get('repository')
   if $options->{verbose};
  $mcpi->inject( $options->{verbose} );
}

sub mirror {
  my($mcpi, $options) = @_;
  my %mirroropts;

  $mirroropts{remote} = $options->{remote}  if defined $options->{remote};
  $mirroropts{local}  = $options->{local}   if defined $options->{local};
  $mirroropts{trace}  = $options->{verbose} if defined $options->{verbose};

  $mcpi->update_mirror( %mirroropts );
}

sub show {
  my($mcpi, $options) = @_;

  my %config = %{ $mcpi->{config} };
  my $file = delete $config{file};

  print do {
    if( length $options->{config_file} ) {
      "--config is <$options->{config_file}> (will not search for other files)\n";
    } else {
      "--config is  is not set\n";
    }
  };
    print do {
    if( length $ENV{MCPANI_CONFIG} ) {
      "MCPANI_CONFIG is <$ENV{MCPANI_CONFIG}>\n";
    } else {
      "MCPANI_CONFIG is not set\n";
    }
  };

  my @files = map {
    my @attrs;
    push @attrs, -e ? 'exists' : 'not found';

    if ( -e _ ) {
      push @attrs, -r _ ? 'readable' : 'not readable';
      push @attrs, 'plain file' if -f _;
      push @attrs, 'directory' if -d _;
    }
    sprintf "%s (%s)", $_, join ", ", @attrs;
    } grep {length} ($options->{config}, CPAN::Mini::Inject::Config->_config_files);

  print join "\n    ", "config file search path is:", grep {length} @files;
  print "\n";

  print "mcpani config from <$file>\n";
  my( $longest ) = sort { $b <=> $a } map { length $_ } keys %config;
  foreach my $field ( sort keys %config ) {
    printf "    %-${longest}s %s\n", $field, $config{$field};
  }
}

sub update {
  my($mcpi, $options) = @_;

  mirror( $mcpi, $options );
  inject( $mcpi, $options );
}

sub process_options {
  my @args = @_;
  my %options;

  Getopt::Long::Configure( 'no_ignore_case' );
  Getopt::Long::Configure( 'bundling' );

  Getopt::Long::GetOptionsFromArray(
    \@args,
    'h|help|?'          => sub { pod2usage( { -verbose => 1, -input => \*DATA } ); exit },
    'H|man'             => sub { pod2usage( { -verbose => 2, -input => \*DATA } ); exit },
    'V|version'         => sub { print_version(); exit; },

    'add'               => \$options{add},
    'update'            => \$options{update},
    'mirror'            => \$options{mirror},
    'inject'            => \$options{inject},
    'show'              => \$options{show},

    'all-in-meta'       => \$options{'all-in-meta'},
    'authorid=s'        => \$options{authorid},
    'c|config=s'        => \$options{config_file},
    'discover-packages' => \$options{'discover-packages'},
    'file=s'            => \$options{file},
    'l|local=s'         => \$options{local},
    'module=s'          => \$options{module},
    'modversion=s'      => \$options{version},
    'p|passive'         => \$ENV{FTP_PASSIVE},
    'r|remote=s'        => \$options{remote},
    'signing-key=s'     => \$options{'signing_key'},
    'v|verbose'         => \$options{verbose},
  ) or return;

  *verbose = $options{verbose} ? sub { print @_ } : sub { 1 };

  my @actions = grep { $options{$_} } qw(add inject update mirror show);
  if( @actions > 1 ) {
    verbose( "Found more than one action: @actions\n" );
    return;
  } elsif ( @actions == 0 ) {
    verbose( "Did not find an action. Nothing to do.\n" );
    return;
  } else {
    my %actions_map = (
      add    => \&add,
      update => \&update,
      mirror => \&mirror,
      inject => \&inject,
      show   => \&show,
    );

    $options{'actionname'} = $actions[0];
    $options{'action'} = $actions_map{ $actions[0] };
  }

  return \%options;
}

sub run {
  my @args = @_;
  my $options = process_options(@args);

  unless( defined $options ) {
    print STDERR "Could not process options. Exiting.\n";
    exit 2;
  }

  my $config_file = $options->{config_file} //  CPAN::Mini::Inject::Config->_find_config;
  verbose "Using config file <$config_file>\n";

  $mcpi = CPAN::Mini::Inject->new->loadcfg( $config_file )->parsecfg;

  $CPAN::Checksums::SIGNING_KEY = $options->{'signing_key'}
      if ($options->{'signing_key'});

  &{ $options->{action} }( $mcpi, $options );
}

run(@ARGV) unless caller;

__END__

=head1 NAME

mcpani -- A command line tool to manage a CPAN Mini Mirror.

=head1 SYNOPSIS

mcpani [options] < --add | --update | --mirror | --inject >

Commands:

    --add               Add a new package to the repository
          --module      Name of the module to add
          --authorid    Author ID of the module
          --modversion  Version number of the module
          --file        distribution module

    --update            Update local CPAN mirror and inject modules
    --mirror            Update local CPAN mirror from remote
    --inject            Add modules from repository to CPAN mirror

Options:

    -h, --help          This synopsis
    -H, --man           Detailed description

    -l, --local         local location for CPAN::Mini Mirror
    -r, --remote        CPAN mirror to mirror from
    -p, --passive       Enable passive ftp for mirroring.
    -v, --verbose       verbose output
    -V, --version       Version information.
        --signing-key   See CPAN::Checksums $SIGNING_KEY

=head1 DESCRIPTION

B<mcpani> uses L<CPAN::Mini> to build or update a local CPAN mirror from a
remote one, while also adding private or third-party distributions.

=head2 Configuration file

B<mcpani> will search the following four places in order:

=over 4

=item * file pointed to by the environment variable MCPANI_CONFIG

=item * $HOME/.mcpani/config

=item * /usr/local/etc/mcpani

=item * /etc/mcpani

=back

By default, B<mcpani> uses a simple configuration file in the following format:

  local: /www/CPAN
  remote: ftp://ftp.cpan.org/pub/CPAN ftp://ftp.kernel.org/pub/CPAN
  repository: /work/mymodules
  passive: yes
  dirmode: 0755

=head2 Configuration options

=over 4

=item C<default_authorid>

The authorid to use if you don't specify one with C<--add>.

=item C<dirmode>

Set the permissions of created directories to the specified mode
(octal value). The default value is based on the umask (if supported).

=item C<local> (required)

location to store local CPAN::Mini mirror

=item C<passive>

Enable passive FTP.

=item C<remote> (required)

CPAN site(s) to mirror from. Multiple sites can be listed, with spaces
between them.

=item C<repository>

Location to store modules to add to the local CPAN::Mini mirror.

=back

=head2 Command-line options

=over 4

=item C<--add>

=over 4

=item C<--authorid> the CPAN ID

=item C<--file> the distribution file

=item C<--module> the package name of the main module

=item C<-v>, C<--verbose>

=item C<--version> the version of the distribution

=back

=item C<-h>, C<-H>, C<--help>, C<--man>, C<-?>

Output a help message and exit.

=item C<--inject>

Inject the local distributions into the local repository.

=over 4

=item C<-v>, C<--verbose>

=back

=item C<--mirror>

Update the local MiniCPAN by downloading the latest modules from the
public CPAN (or the CPAN-like repo specified in the C<remote> config.
C<--mirror> uses

=over 4

=item C<-l>, C<--local>

=item C<-r>, C<--remote>

=item C<-v>, C<--verbose>

=back

=item C<--update>

This runs C<--mirror> then C<--inject>.

=item  C<-V>, C<--version>

Output the version of B<mcpani> and exit.

=back

=head1 AUTHOR

Shawn Sorichetti C<< <ssoriche@coloredblocks.net> >>

=head1 ISSUES

Report issues to the GitHub queue:

	https://github.com/briandfoy/cpan-mini-inject/issues

=head1 COPYRIGHT & LICENSE

Copyright 2004 Shawn Sorichetti, All Rights Reserved.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
